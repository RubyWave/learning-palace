const fs = require("fs");
const readline = require("readline");
const { exit } = require("process");
const slugify = require("slugify");
const ejs = require("ejs");

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout,
	prompt: ">",
});

const blockData = {
	name: "",
	slug: "",
	pascalCaseSlug: "", // used for some file names
	description: "This is just undescribed block.",
	JSincluded: false,
};

/**
 * Converts slug input to PascalCase
 */
function slugToPascalCase(slug) {
	const camelCased = slug.replace(/-./g, (c) => c.substring(1).toUpperCase());
	return camelCased[0].toUpperCase() + camelCased.slice(1);
}

function getBlockName() {
	return new Promise((resolve, reject) => {
		rl.question("Enter block name: ", (name) => {
			if (name === "") {
				return reject("block name cannot be empty");
			}

			blockData.name = name;
			blockData.slug = slugify(name, {
				lower: true,
			});
			blockData.pascalCaseSlug = slugToPascalCase(blockData.slug);
			resolve();
		});
	});
}

function getBlockSlug() {
	return new Promise((resolve, reject) => {
		rl.question(`Enter block slug (empty for autogenerated): `, (slug) => {
			if (slug !== "") {
				blockData.slug = slugify(slug, {
					lower: true,
				});
				blockData.pascalCaseSlug = slugToPascalCase(blockData.slug);
			}

			resolve();
		});
	});
}

function getBlockDescription() {
	return new Promise((resolve, reject) => {
		rl.question(`Enter short block description: `, (description) => {
			if (description !== "") {
				blockData.description = description;
			}

			resolve();
		});
	});
}

function ifIncludeJS() {
	return new Promise((resolve, reject) => {
		rl.question(`If include JS file (y/n): `, (ifInclude) => {
			if (ifInclude === "Y" || ifInclude === "y") {
				blockData.JSincluded = true;
			}

			resolve();
		});
	});
}

function createBlockDirectory() {
	const path = "./blocks/" + blockData.slug + "/";
	return new Promise((resolve, reject) => {
		if (fs.existsSync(path)) {
			return reject(`Error: ${path} folder already exists.`);
		}
		fs.mkdir(
			path,
			{
				recursive: true,
			},
			(err) => {
				if (err) {
					return reject(err);
				} else {
					console.log("\x1b[32mCreated directory: \x1b[34m" + path);
					resolve();
				}
			},
		);
	});
}

function createIncludesFile() {
	const path =
		"./blocks/" + blockData.slug + "/" + blockData.slug + "-includes.js";
	return new Promise((resolve, reject) => {
		try {
			var template = fs.readFileSync(
				"./resources/block-creator/templates/block-includes.ejs",
				"utf-8",
			);
			const includesFile = ejs.render(template, { blockData: blockData });

			fs.writeFileSync(path, includesFile);

			console.log("\x1b[32mCreated includes file: \x1b[34m" + path);
			resolve();
		} catch (e) {
			return reject(`Error: ${e} `);
		}
	});
}

function createStylesFile() {
	const path =
		"./blocks/" + blockData.slug + "/" + blockData.slug + "-style.scss";
	return new Promise((resolve, reject) => {
		try {
			var template = fs.readFileSync(
				"./resources/block-creator/templates/block-style.ejs",
				"utf-8",
			);
			const styleFile = ejs.render(template, { blockData: blockData });

			fs.writeFileSync(path, styleFile);

			console.log("\x1b[32mCreated style file: \x1b[34m" + path);
			resolve();
		} catch (e) {
			return reject(`Error: ${e} `);
		}
	});
}

function createScriptFile() {
	const path =
		"./blocks/" + blockData.slug + "/" + blockData.slug + "-script.js";
	return new Promise((resolve, reject) => {
		try {
			var template = fs.readFileSync(
				"./resources/block-creator/templates/block-script.ejs",
				"utf-8",
			);
			const scriptFile = ejs.render(template, { blockData: blockData });

			fs.writeFileSync(path, scriptFile);

			console.log("\x1b[32mCreated script file: \x1b[34m" + path);
			resolve();
		} catch (e) {
			return reject(`Error: ${e} `);
		}
	});
}

function createTemplateFile() {
	const path = "./blocks/" + blockData.slug + "/" + blockData.slug + ".php";
	return new Promise((resolve, reject) => {
		try {
			var template = fs.readFileSync(
				"./resources/block-creator/templates/block-template.ejs",
				"utf-8",
			);
			const templateFile = ejs.render(template, { blockData: blockData });

			fs.writeFileSync(path, templateFile);

			console.log("\x1b[32mCreated template file: \x1b[34m" + path);
			resolve();
		} catch (e) {
			return reject(`Error: ${e} `);
		}
	});
}

function createRegistrationFile() {
	const path = "./includes/blocks/" + blockData.pascalCaseSlug + "Block.php";
	return new Promise((resolve, reject) => {
		try {
			var template = fs.readFileSync(
				"./resources/block-creator/templates/block-registration.ejs",
				"utf-8",
			);
			const registrationFile = ejs.render(template, {
				blockData: blockData,
			});

			fs.writeFileSync(path, registrationFile);

			console.log("\x1b[32mCreated registration file: \x1b[34m" + path);
			resolve();
		} catch (e) {
			return reject(`Error: ${e} `);
		}
	});
}

function addIncludeFile() {
	const path = "./block-includer.php";
	return new Promise((resolve, reject) => {
		fs.appendFile(
			path,
			`new Palace\\Blocks\\${blockData.pascalCaseSlug}Block();\n`,
			function (e) {
				if (e) reject(`Error: ${e} `);
				console.log(
					"\x1b[32mAppended include class in: \x1b[34m" + path,
				);
				resolve();
			},
		);
	});
}

(async () => {
	try {
		console.log(
			"\n \x1b[35m #### Welcome to Palace's Block Creator #### \x1b[0m \n",
		);

		// aquiring block info
		await getBlockName();
		await getBlockSlug();
		await getBlockDescription();
		await ifIncludeJS();

		console.log("\n\n \x1b[33m #### Provided data #### \x1b[0m \n");
		console.log(blockData);

		// generating files
		console.log("\n\n \x1b[33m #### Generating files #### \x1b[0m \n");
		await createBlockDirectory();
		await createIncludesFile();
		await createStylesFile();
		await createScriptFile();
		await createTemplateFile();
		await createRegistrationFile();
		await addIncludeFile();

		console.log("\x1b[0m"); // conole color reset
	} catch (error) {
		console.log("\n \x1b[31m #### BLOCK CREATION FAILED #### \n");
		console.log("\x1b[31m Error \x1b[0m", error);
		exit();
	}

	rl.close();
})();
